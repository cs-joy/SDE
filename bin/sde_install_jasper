#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "ERROR: $@"
	exit 1
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

isabspath()
{
	case "$1" in
	/*)
		echo "1";;
	*)
		echo "0";;
	esac
}

usage()
{
	echo "BAD USAGE: $@"
	cat <<- EOF
	usage: $0 -v \$version -d \$install_dir

	Options:
	-v \$version
	    Set the version of the software for installation to \$version.
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=
install_dir=
build_doc=1
cleanup=1

while getopts d:v:o:C opt; do
	case "$opt" in
	C)
		cleanup=0;;
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	o)
		case "$OPTARG" in
		build_doc)
			build_doc=1;;
		no_build_doc)
			build_doc=0;;
		*)
			usage "bad option name";;
		esac
		;;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir="$install_dir"
result=$(isabspath "$abs_install_dir") || \
  panic "absolute path test failed"
if [ "$result" -eq 0 ]; then
	abs_install_dir="$cur_dir/$abs_install_dir"
fi
install_dir="$abs_install_dir"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

url="https://github.com/jasper-software/jasper/archive/version-$version.tar.gz"

tmp_dir_template="/tmp/sde_install_jasper-$user@$host-XXXXXXXX"

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi
src_dir="$tmp_dir"
build_dir="$tmp_dir/tmp_cmake"

for dir in "$build_dir"; do
	mkdir -p "$dir" || \
	  panic "cannot make directory $dir"
done

(cd "$tmp_dir" && wget "$url") || \
  panic "cannot download archive"

archive=$(basename "$url") || \
  panic "cannot get basename of URL"

(cd "$tmp_dir" && tar -xzf "$archive" --strip-components=1) || \
  panic "cannot extract archive"

cmake_opts=()
cmake_opts+=(-G "Unix Makefiles")
cmake_opts+=(-DCMAKE_INSTALL_PREFIX="$install_dir")
cmake_opts+=(-DCMAKE_BUILD_TYPE=Debug)
if [ "$build_doc" -ne 0 ]; then
	cmake_opts+=(-DJAS_ENABLE_DOC=true)
else
	cmake_opts+=(-DJAS_ENABLE_DOC=false)
fi

(cd "$build_dir" &&
  cmake "${cmake_opts[@]}" "$src_dir") || \
  panic "cmake failed"

make_opts=()
make_opts+=(-j4)

(cd "$build_dir" && make "${make_opts[@]}") || \
  panic "make failed"

(cd "$build_dir" && make install) || \
  panic "make install failed"
