#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "FATAL ERROR: $@" 1>&2
	exit 1
}

eecho()
{
	echo "$@" 1>&2
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]

	Options
	=======

	-n \$env
	    Set the environment to \$env.
	-f
	    Allow use of command from within SDE environment.
	-D \$debug_level
	    Set debug level to \$debug_level.
	-x
	    Program to execute and its arguments follow.
	-q
	    Reduce verbosity of output.

	Examples
	========

	$0
	$0 -n base
	$0 -x bash
	$0 -p cmake:gcc:clang
	EOF
	exit 2
}

cmd_dir=`dirname $0` || panic "cannot get command directory"
top_dir="$cmd_dir/.."
bashrc="$cmd_dir/sde_shell_bashrc"
setup="$cmd_dir/sde_setup"
make_setup="$cmd_dir/sde_make_setup"
motd_file="$top_dir/etc/motd"

printenv_program=$(type -P printenv) || printenv_program=
grep_program=$(type -P grep) || grep_program=

debug_level=0
force=0
name=
verbose=1
package_spec=
print_motd=1
use_z=0

while getopts D:n:fqxvp:sS:z opt; do
	case "$opt" in
	z)
		use_z=1;;
	S)
		make_setup="$OPTARG";;
	v)
		verbose=$((verbose + 1));;
	q)
		verbose=$((verbose - 1));;
	p)
		package_spec="$OPTARG";;
	n)
		name="$OPTARG";;
	f)
		force=1;;
	D)
		debug_level="$OPTARG";;
	x)
		break;;
	s)
		print_motd=0;;
	*)
		usage "invalid option $opt";;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

program_args=("$@")

if [ -n "$name" -a -n "$package_spec" ]; then
	panic "cannot specify environment name and packages"
fi

if [ -n "$SDE_NAME" -a "$force" -eq 0 ]; then
	panic "nesting of SDE environments is disallowed"
fi

if [ "${#program_args[@]}" -ne 0 ]; then
	basename=$(basename "${program_args[0]}") || \
	  panic "cannot get base name"
	case "$basename" in
	bash|sh|csh|tcsh|ksh)
		panic "cannot run shell in arbitrary manner " \
		  "(as this could corrupt environment)"
		;;
	esac
	# Generate the command to set the PATH environment variable,
	# since this variable will not be set otherwise.
	emit_path=1
else
	shell=$(basename "$SHELL") || panic "cannot get shell"
	case "$shell" in
	bash)
		program_args=("$SHELL" --noprofile --init-file "$bashrc" -i)
		# Do not generate the command to set the PATH environment variable,
		# as this variable will be set in the custom bashrc.
		emit_path=0
		;;
	#csh|tcsh)
	#	program_args=("$SHELL" -i)
	#	;;
	*)
		eecho "The shell $SHELL is not supported."
		bash_program=$(which bash) || panic "cannot find bash shell"
		eecho "Using shell $bash_program instead."
		eecho "It is recommended that you change your login shell to bash."
		program_args=("$bash_program" --noprofile --init-file "$bashrc" -i)
		# Do not generate the command to set the PATH environment variable,
		# as this variable will be set in the custom bashrc.
		emit_path=0
		;;
	esac
fi

if [ ! -x "$make_setup" ]; then
	panic "make_setup program not found"
fi

make_setup_opts=()

make_setup_opts+=(-f)
if [ "$emit_path" -ne 0 ]; then
	make_setup_opts+=(-Z)
fi
if [ -n "$name" ]; then
	make_setup_opts+=(-n "$name")
fi
if [ -n "$package_spec" ]; then
	make_setup_opts+=(-p "$package_spec")
fi
if [ "$use_z" -ne 0 ]; then
	make_setup_opts+=(-z)
fi

buffer=$("$make_setup" "${make_setup_opts[@]}" -s bash) || \
  panic "sde_make_setup failed"
eval "$buffer" || panic "eval failed"

if [ "$debug_level" -ge 2 ]; then
	"$printenv_program" | "$grep_program" '^SDE_LEVEL'
	"$printenv_program" | "$grep_program" '^SDE_'
	"$printenv_program" | "$grep_program" '^PATH='
fi

if [ "$print_motd" -ne 0 -a -f "$motd_file" ]; then
	cat "$motd_file" || panic "cannot print welcome message"
fi

if [ "$debug_level" -ge 1 ]; then
	eecho "PATH is set to $PATH"
fi
if [ "$debug_level" -ge 1 ]; then
	eecho "Running ${program_args[@]}"
fi

exec "${program_args[@]}"
